---
# yamllint disable rule:line-length
name: Lazy Octopus Action
description: |
  Github Action to create release in Octopus.

  ## Usage

  Please reference
  [DX Workflow](https://dx.docs.usxpress.io)
  documentation as actions-octopus v3 should only be used in tandem with DX Workflow.
  DX Workflow defines and deploys both infrastructure and applications.

  1. Create a deployment spec in `.variant/deploy`. Reference the
    [DX Workflow Documentation](https://dx.docs.usxpress.io/buildci/tutorials/)
    for more information.

  2. Add a build step to your GitHub actions workflow yaml.
    [More examples](https://dx.docs.usxpress.io/buildci/github_actions/#examples-of-github-actions-that-the-dx-workflow-supports).

  ```yaml
  - name: Lazy Action Octopus
    uses: variant-inc/actions-octopus@v3
  ```

  ## Migrating to v3

  v3 runs CI using cake. Currently only repositories that do not deploy
  infrastructure can migrate to v3.

  1. Change uses new action version v3: `variant-inc/actions-octopus@v3`
  2. Add a Variant Deploy Yaml File following the usage above.
    Note that only certain versions of charts in lazy-helm-charts are supported
    and may require you to update and fix breaking changes with
    the helm release.
inputs:
  tf_apps_version:
    description: |
      terraform-variant-apps package version
      Defaults to latest release version. Can be overridden by exact version or specifying range in [NuGet notation](https://learn.microsoft.com/en-us/nuget/concepts/package-versioning).
    required: false
    default: <3.19
  mage_runner_version:
    description: |
      mage-runner package version
      Defaults to latest release version. Can be overridden by exact version or specifying range in [NuGet notation](https://learn.microsoft.com/en-us/nuget/concepts/package-versioning).
    required: false
    default: <1.11
  schemas_version:
    description: |
      dx-schemas version
      Defaults to latest release version. Can be overridden by exact version or specifying range in [NuGet notation](https://learn.microsoft.com/en-us/nuget/concepts/package-versioning).
    required: false
    default: <1.0
  deploy_yaml_dir:
    description: |
      Defaults to `.variant/deploy` for backwards compatibility.
      This is the place where the YAML files for DX are located.
    required: false
    default: .variant/deploy
runs:
  using: composite
  steps:
    - name: Set Default Branch
      shell: bash
      run: |
        if [ "$GitVersion_PreReleaseLabel" == "" ]; then
          echo "INPUT_DEFAULT_BRANCH=$GitVersion_BranchName" >>"$GITHUB_ENV"
        fi
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Download GoCli
      uses: variant-inc/go-version-select@v0.1

    - name: Get package versions
      id: package-version
      shell: bash
      run: ${{ github.action_path }}/version.sh
      env:
        MAGE_RUNNER_CONSTRAINT: ${{ inputs.mage_runner_version }}
        TF_APPS_CONSTRAINT: ${{ inputs.tf_apps_version }}
        SCHEMAS_CONSTRAINT: ${{ inputs.schemas_version }}

    - name: Set Mage Directory Path
      shell: bash
      run: |
        echo "MAGE_DIR_PATH=cache/mage" >> $GITHUB_ENV
        echo "SCHEMA_BASE_PATH=cache/schemas" >> $GITHUB_ENV

    - name: Cache mage
      id: cache-mage
      uses: actions/cache@v4
      with:
        path: ${{ env.MAGE_DIR_PATH }}/mage
        key: mage-runner.${{ steps.package-version.outputs.mage-runner-version }}

    - name: Download mage
      if: steps.cache-mage.outputs.cache-hit != 'true'
      shell: bash
      run: |
        ${{ github.action_path }}/package.sh
        chmod +x "$MAGE_DIR_PATH"/mage
      env:
        UNZIP_PATH: ${{ env.MAGE_DIR_PATH }}
        S3_KEY: mage-runner/mage-runner.${{ steps.package-version.outputs.mage-runner-version }}.zip

    - name: Cache Schemas
      id: cache-schemas
      uses: actions/cache@v4
      with:
        path: ${{ env.SCHEMA_BASE_PATH }}
        key: schemas.${{ steps.package-version.outputs.schemas-version }}

    - name: Download schemas
      if: steps.cache-schemas.outputs.cache-hit != 'true'
      shell: bash
      run: ${{ github.action_path }}/package.sh
      env:
        UNZIP_PATH: ${{ env.SCHEMA_BASE_PATH }}
        S3_KEY: dx-schemas/dx-schemas.${{ steps.package-version.outputs.schemas-version }}.zip

    - name: Setup Octopus Project & Release
      shell: pwsh
      run: ${{ github.action_path }}/tasks.ps1
      env:
        MAGE_RUNNER_VERSION: ${{ steps.package-version.outputs.mage-runner-version }}
        TF_APPS_VERSION: ${{ steps.package-version.outputs.tf-apps-version }}
        SCHEMAS_VERSION: ${{ steps.package-version.outputs.schemas-version }}
        OCTOPUS_CLI_API_KEY: ${{ env.OCTOPUS_CLI_API_KEY }}
        OCTOPUS_CLI_SERVER: ${{ env.OCTOPUS_CLI_SERVER }}
        DEPLOY_YAML_DIR: ${{ inputs.deploy_yaml_dir }}
        SCHEMA_BASE_PATH: ${{ github.workspace }}/${{ env.SCHEMA_BASE_PATH }}/schemas

    - name: Create Release Action
      uses: variant-inc/actions-collection/create-release-tag@v2
